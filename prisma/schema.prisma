// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  cetegories Category[]  @relation("StoreToCategory")
  collections      Collection[]      @relation("StoreTocollection")
  publishings    Publishing[]    @relation("StoreTopublishing")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Collection {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreTocollection", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Publishing {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreTopublishing", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  description String	@db.Text
  quantity   Int
  price      Decimal
  isNew   Boolean  @default(false)
  isSale   Boolean  @default(false)
  sale Int
  isLowQuantity Boolean  @default(false)
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  collectionId     String
  collection       Collection     @relation(fields: [collectionId], references: [id])
  publishingId   String
  publishing     Publishing   @relation(fields: [publishingId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([collectionId])
  @@index([publishingId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
    id         String      @id @default(uuid())
    storeId    String
    store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
    orderItems OrderItem[]
    status    String
    isPaid     Boolean     @default(false)
    phone      String      @default("")
    address    String      @default("")
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    @@index([storeId])
  }

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  
  @@index([orderId])
  @@index([productId])
}
 